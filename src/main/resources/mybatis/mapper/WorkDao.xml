<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ymt.dao.WorkDao">

<sql id="Simple_Column">
 select
 work.id as work_id,
 work.userId as work_userId,
 work.title as work_title,
 work.addTime as work_addTime,
 work.state as work_state,
 work.count as work_count,
 work.categoryId as work_categoryId,
 work.commentCount as work_commentCount
 from work as work 
</sql>

<sql id="Base_Column">
 select
 work.id as work_id,
 work.userId as work_userId,
 work.title as work_title,
 work.addTime as work_addTime,
 work.state as work_state,
 work.count as work_count,
 work.categoryId as work_categoryId,
 work.commentCount as work_commentCount
 from work as work 
</sql>

<sql id="Detail_Column">
 select
 work.id as work_id,
 work.userId as work_userId,
 work.title as work_title,
 work.addTime as work_addTime,
 work.state as work_state,
 work.count as work_count,
 work.categoryId as work_categoryId,
 work.commentCount as work_commentCount
 from work as work 
</sql>

<resultMap id="SimpleResultMap" type="cn.ymt.view.simple.WorkSimpleView">
<id column="work_id" jdbcType="INTEGER" property="id" />
 <result column="work_userId" jdbcType="INTEGER" property="userId" />
 <result column="work_title" jdbcType="VARCHAR" property="title" />
 <result column="work_addTime" jdbcType="DATE" property="addTime" />
 <result column="work_state" jdbcType="TINYINT" property="state" />
 <result column="work_count" jdbcType="INTEGER" property="count" />
 <result column="work_categoryId" jdbcType="INTEGER" property="categoryId" />
 <result column="work_commentCount" jdbcType="INTEGER" property="commentCount" />
</resultMap>

<resultMap id="BaseResultMap" type="cn.ymt.view.WorkView">
<id column="work_id" jdbcType="INTEGER" property="id" />
 <result column="work_userId" jdbcType="INTEGER" property="userId" />
 <result column="work_title" jdbcType="VARCHAR" property="title" />
 <result column="work_addTime" jdbcType="DATE" property="addTime" />
 <result column="work_state" jdbcType="TINYINT" property="state" />
 <result column="work_count" jdbcType="INTEGER" property="count" />
 <result column="work_categoryId" jdbcType="INTEGER" property="categoryId" />
 <result column="work_commentCount" jdbcType="INTEGER" property="commentCount" />
</resultMap>

<resultMap id="DetailResultMap" type="cn.ymt.view.WorkView" extends="BaseResultMap">
 <result column="mylike" jdbcType="INTEGER" property="mylike" />
 <association property="user" javaType="cn.ymt.pojo.User">
  <id column="user_id" jdbcType="INTEGER" property="id" />
  <result column="user_imgUrl" jdbcType="VARCHAR" property="imgUrl" />
  <result column="user_nickName" jdbcType="VARCHAR" property="nickName" />
 </association>
 <collection property="imgs" ofType="cn.ymt.pojo.Img">
  <result column="img_imgUrl" jdbcType="VARCHAR" property="imgUrl" />
 </collection>
</resultMap>

<delete id="deleteById" parameterType="java.lang.Integer">
delete from work where id = #{id,jdbcType=INTEGER}
</delete>

<delete id="deleteByIds">
delete from work
where <foreach collection="list" item="i" open="(" close=")" separator=" or "> id=#{i,jdbcType=INTEGER} </foreach>
  </delete>

<delete id="deleteObjects">
delete from work
where <foreach collection="list" item="i" open="(" close=")" separator=" or "> id=#{i.id,jdbcType=INTEGER} </foreach>
  </delete>

<delete id="deleteByParams" parameterType="cn.ymt.query.WorkQueryParams">
delete from work 
<where><if test="condition != null">${condition}</if></where>
</delete>

<insert id="save" parameterType="cn.ymt.view.WorkView" useGeneratedKeys="true" keyProperty="id">
insert into work (userId,title,addTime,state,count,categoryId,commentCount) 
 values(#{userId,jdbcType=INTEGER},#{title,jdbcType=VARCHAR},#{addTime,jdbcType=DATE},#{state,jdbcType=TINYINT},#{count,jdbcType=INTEGER},#{categoryId,jdbcType=INTEGER},#{commentCount,jdbcType=INTEGER})
</insert>

<insert id="saveNoNull" parameterType="cn.ymt.view.WorkView" useGeneratedKeys="true" keyProperty="id">
insert into work
<trim prefix="(" suffix=")" suffixOverrides=",">
 <if test="userId != null">
userId,
</if>
 <if test="title != null">
title,
</if>
 <if test="addTime != null">
addTime,
</if>
 <if test="state != null">
state,
</if>
 <if test="count != null">
count,
</if>
 <if test="categoryId != null">
categoryId,
</if>
 <if test="commentCount != null">
commentCount,
</if>
</trim>

<trim prefix="values(" suffix=")" suffixOverrides=",">
<if test="userId != null">
#{userId,jdbcType=INTEGER},
</if>
<if test="title != null">
#{title,jdbcType=VARCHAR},
</if>
<if test="addTime != null">
#{addTime,jdbcType=DATE},
</if>
<if test="state != null">
#{state,jdbcType=TINYINT},
</if>
<if test="count != null">
#{count,jdbcType=INTEGER},
</if>
<if test="categoryId != null">
#{categoryId,jdbcType=INTEGER},
</if>
<if test="commentCount != null">
#{commentCount,jdbcType=INTEGER},
</if>
</trim>
</insert>

<insert id="saves" >
insert into work (userId,title,addTime,state,count,categoryId,commentCount) 
 values <foreach collection="list" item="obj" separator=",">(#{obj.userId,jdbcType=INTEGER},#{obj.title,jdbcType=VARCHAR},#{obj.addTime,jdbcType=DATE},#{obj.state,jdbcType=TINYINT},#{obj.count,jdbcType=INTEGER},#{obj.categoryId,jdbcType=INTEGER},#{obj.commentCount,jdbcType=INTEGER})</foreach>
</insert>
<update id="updateAll" parameterType="cn.ymt.view.WorkView">
update work 
set  userId = #{userId,jdbcType=INTEGER}, title = #{title,jdbcType=VARCHAR}, addTime = #{addTime,jdbcType=DATE}, state = #{state,jdbcType=TINYINT}, count = #{count,jdbcType=INTEGER}, categoryId = #{categoryId,jdbcType=INTEGER}, commentCount = #{commentCount,jdbcType=INTEGER} where id = #{id,jdbcType=INTEGER}
</update>
 <update id="updateNoNull" parameterType="cn.ymt.view.WorkView">
update work 
<set>
<if test="userId != null"> userId = #{userId,jdbcType=INTEGER},</if>
<if test="title != null"> title = #{title,jdbcType=VARCHAR},</if>
<if test="addTime != null"> addTime = #{addTime,jdbcType=DATE},</if>
<if test="state != null"> state = #{state,jdbcType=TINYINT},</if>
<if test="count != null"> count = #{count,jdbcType=INTEGER},</if>
<if test="categoryId != null"> categoryId = #{categoryId,jdbcType=INTEGER},</if>
<if test="commentCount != null"> commentCount = #{commentCount,jdbcType=INTEGER},</if>
</set>
 where id = #{id,jdbcType=INTEGER}
</update>

<select id="getBasicById"  resultMap="BaseResultMap" parameterType="java.lang.Integer">
<include refid="Base_Column" />
where work.id = #{id,jdbcType=INTEGER}
</select>

<select id="getDetailById"  resultMap="DetailResultMap" parameterType="java.lang.Integer">
<include refid="Detail_Column" />
where work.id = #{id,jdbcType=INTEGER}
</select>

<select id="count" parameterType="cn.ymt.query.WorkQueryParams" resultType="long">
select count(distinct work.id) from work as work
<where>
<if test="condition != null">(${condition})</if>
</where>
</select>

<select id="getDistinctIds" parameterType="cn.ymt.query.WorkQueryParams" resultType="java.lang.Integer">
select distinct work.id from work as work
<where>
<if test="condition != null">(${condition})</if>
</where>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getSimple" parameterType="cn.ymt.query.WorkQueryParams" resultMap="SimpleResultMap">
<include refid="Simple_Column" />
<where>
<if test="condition != null">(${condition})</if>
<if test="pojos != null">
 and <foreach collection="pojos" open="(" close=")" separator=" or " item="pojo">work.id=#{pojo.id,jdbcType=INTEGER}</foreach>
</if>
<if test="ids != null">
 and <foreach collection="ids" open="(" close=")" separator=" or " item="idTemp">work.id=#{idTemp,jdbcType=INTEGER}</foreach>
</if>
</where>
<if test="orderBy != null"> order by ${orderBy}</if>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getBasic" parameterType="cn.ymt.query.WorkQueryParams" resultMap="BaseResultMap">
<include refid="Base_Column" />
<where>
<if test="condition != null">(${condition})</if>
<if test="pojos != null">
 and <foreach collection="pojos" open="(" close=")" separator=" or " item="pojo">work.id=#{pojo.id,jdbcType=INTEGER}</foreach>
</if>
<if test="ids != null">
 and <foreach collection="ids" open="(" close=")" separator=" or " item="idTemp">work.id=#{idTemp,jdbcType=INTEGER}</foreach>
</if>
</where>
<if test="orderBy != null"> order by ${orderBy}</if>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getDetail" parameterType="cn.ymt.query.WorkQueryParams" resultMap="DetailResultMap">
<include refid="Detail_Column" />
 where work.id in 
(select * from(select distinct work.id from work as work 
<where>
<if test="condition != null">(${condition})</if>
</where>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
) as worktempTable)
</select>
<!--%%%%%%%%%%%%%%%%%%%%%%%%%-->
 <select id="get" parameterType="cn.ymt.query.WorkQueryParams" resultMap="DetailResultMap">
  select
  work.id as work_id,
  work.title as work_title,
  work.addTime as work_addTime,
  work.count as work_count,
  work.commentCount as work_commentCount,
  user.id as user_id,
  user.imgUrl as user_imgUrl,
  user.nickName as user_nickName,
  img.imgUrl as img_imgUrl,
  1-ISNULL(userlike.id) as mylike
  from work as work
  LEFT JOIN user as `user`
  on `work`.userId = `user`.id
  LEFT JOIN userLike as userLike
  on userlike.workId = `work`.id
  LEFT JOIN img as img
  on img.workId = `work`.id
  order by `work`.addTime desc
  <where>
   <if test="condition != null">(${condition})</if>
  </where>
  <if test="orderBy != null"> order by ${orderBy}</if>
  <if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
 </select>

 <select id="getMyself" resultMap="DetailResultMap">
  select
  work.id as work_id,
  work.title as work_title,
  work.addTime as work_addTime,
  work.count as work_count,
  work.commentCount as work_commentCount,
  img.imgUrl as img_imgUrl
  from work as work
  LEFT JOIN img as img
  on img.workId = `work`.id
  WHERE userId = #{id,jdbcType=INTEGER}
  ORDER BY addTime desc
 </select>

</mapper>