<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ymt.dao.CollectDao">

<sql id="Simple_Column">
 select
 collect.id as collect_id,
 collect.userId as collect_userId,
 collect.type as collect_type,
 collect.courseId as collect_courseId,
 collect.detailId as collect_detailId,
 collect.collectTime as collect_collectTime
 from collect as collect 
</sql>

<sql id="Base_Column">
 select
 collect.id as collect_id,
 collect.userId as collect_userId,
 collect.type as collect_type,
 collect.courseId as collect_courseId,
 collect.detailId as collect_detailId,
 collect.collectTime as collect_collectTime
 from collect as collect 
</sql>

<sql id="Detail_Column">
 select
 collect.id as collect_id,
 collect.userId as collect_userId,
 collect.type as collect_type,
 collect.courseId as collect_courseId,
 collect.detailId as collect_detailId,
 collect.collectTime as collect_collectTime
 from collect as collect 
</sql>

<resultMap id="SimpleResultMap" type="cn.ymt.view.simple.CollectSimpleView">
<id column="collect_id" jdbcType="INTEGER" property="id" />
 <result column="collect_userId" jdbcType="INTEGER" property="userId" />
 <result column="collect_type" jdbcType="TINYINT" property="type" />
 <result column="collect_courseId" jdbcType="INTEGER" property="courseId" />
 <result column="collect_detailId" jdbcType="INTEGER" property="detailId" />
 <result column="collect_collectTime" jdbcType="TIMESTAMP" property="collectTime" />
</resultMap>

<resultMap id="BaseResultMap" type="cn.ymt.view.CollectView">
<id column="collect_id" jdbcType="INTEGER" property="id" />
 <result column="collect_userId" jdbcType="INTEGER" property="userId" />
 <result column="collect_type" jdbcType="TINYINT" property="type" />
 <result column="collect_courseId" jdbcType="INTEGER" property="courseId" />
 <result column="collect_detailId" jdbcType="INTEGER" property="detailId" />
 <result column="collect_collectTime" jdbcType="TIMESTAMP" property="collectTime" />
</resultMap>

<resultMap id="DetailResultMap" type="cn.ymt.view.CollectView" extends="BaseResultMap">
</resultMap>

<delete id="deleteById" parameterType="java.lang.Integer">
delete from collect where id = #{id,jdbcType=INTEGER}
</delete>

<delete id="deleteByIds">
delete from collect
where <foreach collection="list" item="i" open="(" close=")" separator=" or "> id=#{i,jdbcType=INTEGER} </foreach>
  </delete>

<delete id="deleteObjects">
delete from collect
where <foreach collection="list" item="i" open="(" close=")" separator=" or "> id=#{i.id,jdbcType=INTEGER} </foreach>
  </delete>

<delete id="deleteByParams" parameterType="cn.ymt.query.CollectQueryParams">
delete from collect 
<where><if test="condition != null">${condition}</if></where>
</delete>

<insert id="save" parameterType="cn.ymt.view.CollectView" useGeneratedKeys="true" keyProperty="id">
insert into collect (userId,type,courseId,detailId,collectTime) 
 values(#{userId,jdbcType=INTEGER},#{type,jdbcType=TINYINT},#{courseId,jdbcType=INTEGER},#{detailId,jdbcType=INTEGER},#{collectTime,jdbcType=TIMESTAMP})
</insert>

<insert id="saveNoNull" parameterType="cn.ymt.view.CollectView" useGeneratedKeys="true" keyProperty="id">
insert into collect
<trim prefix="(" suffix=")" suffixOverrides=",">
 <if test="userId != null">
userId,
</if>
 <if test="type != null">
type,
</if>
 <if test="courseId != null">
courseId,
</if>
 <if test="detailId != null">
detailId,
</if>
 <if test="collectTime != null">
collectTime,
</if>
</trim>

<trim prefix="values(" suffix=")" suffixOverrides=",">
<if test="userId != null">
#{userId,jdbcType=INTEGER},
</if>
<if test="type != null">
#{type,jdbcType=TINYINT},
</if>
<if test="courseId != null">
#{courseId,jdbcType=INTEGER},
</if>
<if test="detailId != null">
#{detailId,jdbcType=INTEGER},
</if>
<if test="collectTime != null">
#{collectTime,jdbcType=TIMESTAMP},
</if>
</trim>
</insert>

<insert id="saves" >
insert into collect (userId,type,courseId,detailId,collectTime) 
 values <foreach collection="list" item="obj" separator=",">(#{obj.userId,jdbcType=INTEGER},#{obj.type,jdbcType=TINYINT},#{obj.courseId,jdbcType=INTEGER},#{obj.detailId,jdbcType=INTEGER},#{obj.collectTime,jdbcType=TIMESTAMP})</foreach>
</insert>
<update id="updateAll" parameterType="cn.ymt.view.CollectView">
update collect 
set  userId = #{userId,jdbcType=INTEGER}, type = #{type,jdbcType=TINYINT}, courseId = #{courseId,jdbcType=INTEGER}, detailId = #{detailId,jdbcType=INTEGER}, collectTime = #{collectTime,jdbcType=TIMESTAMP} where id = #{id,jdbcType=INTEGER}
</update>
 <update id="updateNoNull" parameterType="cn.ymt.view.CollectView">
update collect 
<set>
<if test="userId != null"> userId = #{userId,jdbcType=INTEGER},</if>
<if test="type != null"> type = #{type,jdbcType=TINYINT},</if>
<if test="courseId != null"> courseId = #{courseId,jdbcType=INTEGER},</if>
<if test="detailId != null"> detailId = #{detailId,jdbcType=INTEGER},</if>
<if test="collectTime != null"> collectTime = #{collectTime,jdbcType=TIMESTAMP},</if></set>
 where id = #{id,jdbcType=INTEGER}
</update>

<select id="getBasicById"  resultMap="BaseResultMap" parameterType="java.lang.Integer">
<include refid="Base_Column" />
where collect.id = #{id,jdbcType=INTEGER}
</select>

<select id="getDetailById"  resultMap="DetailResultMap" parameterType="java.lang.Integer">
<include refid="Detail_Column" />
where collect.id = #{id,jdbcType=INTEGER}
</select>

<select id="count" parameterType="cn.ymt.query.CollectQueryParams" resultType="long">
select count(distinct collect.id) from collect as collect
<where>
<if test="condition != null">(${condition})</if>
</where>
</select>

<select id="getDistinctIds" parameterType="cn.ymt.query.CollectQueryParams" resultType="java.lang.Integer">
select distinct collect.id from collect as collect
<where>
<if test="condition != null">(${condition})</if>
</where>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getSimple" parameterType="cn.ymt.query.CollectQueryParams" resultMap="SimpleResultMap">
<include refid="Simple_Column" />
<where>
<if test="condition != null">(${condition})</if>
<if test="pojos != null">
 and <foreach collection="pojos" open="(" close=")" separator=" or " item="pojo">collect.id=#{pojo.id,jdbcType=INTEGER}</foreach>
</if>
<if test="ids != null">
 and <foreach collection="ids" open="(" close=")" separator=" or " item="idTemp">collect.id=#{idTemp,jdbcType=INTEGER}</foreach>
</if>
</where>
<if test="orderBy != null"> order by ${orderBy}</if>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getBasic" parameterType="cn.ymt.query.CollectQueryParams" resultMap="BaseResultMap">
<include refid="Base_Column" />
<where>
<if test="condition != null">(${condition})</if>
<if test="pojos != null">
 and <foreach collection="pojos" open="(" close=")" separator=" or " item="pojo">collect.id=#{pojo.id,jdbcType=INTEGER}</foreach>
</if>
<if test="ids != null">
 and <foreach collection="ids" open="(" close=")" separator=" or " item="idTemp">collect.id=#{idTemp,jdbcType=INTEGER}</foreach>
</if>
</where>
<if test="orderBy != null"> order by ${orderBy}</if>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
</select>

<select id="getDetail" parameterType="cn.ymt.query.CollectQueryParams" resultMap="DetailResultMap">
<include refid="Detail_Column" />
 where collect.id in 
(select * from(select distinct collect.id from collect as collect 
<where>
<if test="condition != null">(${condition})</if>
</where>
<if test="recordIndex != null"> limit #{recordIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}</if>
) as collecttempTable)
</select>

</mapper>